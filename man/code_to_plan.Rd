% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/code_to_plan.R
\name{code_to_plan}
\alias{code_to_plan}
\title{Turn an R script file, knitr / R Markdown report, or quoted R code
into a \code{drake} workflow plan data frame.}
\usage{
code_to_plan(code)
}
\arguments{
\item{code}{If a character vector, \code{code} is a file path to an R script
or \code{knitr} report. Otherwise, \code{code} should be a language object
or expression, as returned by \code{quote(x <- 1)}. For more information,
see Hadley Wickham's Advanced R chapter on expressions:
\url{http://adv-r.had.co.nz/Expressions.html}.}
}
\description{
In your script (or \code{knitr} / R Markdown code chunks,
or quoted R code), you can assign expressions to variables,
and \code{code_file_to_plan()} will turn them into commands and targets,
respectively. The \code{make.R} script demonstrates how this works
for the script \code{script.R} and the report \code{report.Rmd}.
The \code{code_to_plan()} function is similar, but it accepts
quoted code rather than a file.
}
\details{
This feature is easy to break, so there are some rules:
\enumerate{
\item Stick to ssigning a single expression to a single target at a time.
For multi-line commands, please enclose the whole command
in curly braces.
Conversely, compound assignment is not supported
(e.g. \code{target_1 <- target_2 <- target_3 <- get_data()}).
\item Once you assign an expression to a variable,
do not modify the variable any more.
The target/command binding should be permanent.
\item Keep it simple. Please use the assignment operators rather than
\code{assign()} and similar functions.
}
}
\examples{
code_to_plan(quote(x <- 1))
\dontrun{
test_with_dir("Quarantine side effects.", {
drake_example("code_to_plan") # Download some code files to make plans.
# Read the code and Markdown files in the downloaded "code_to_plan"
# folder for details.
code_to_plan("code_to_plan/script.R")
code_to_plan("code_to_plan/report.Rmd")
})
}
}
\seealso{
\code{\link[=drake_plan]{drake_plan()}}, \code{\link[=make]{make()}}
}
